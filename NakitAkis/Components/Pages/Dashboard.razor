@page "/dashboard"
@page "/"
@using NakitAkis.Models
@using NakitAkis.Services
@using System.Text.Json
@using System.Text
@using System.Net.Http.Headers
@inject INakitAkisService NakitAkisService
@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient
@rendermode InteractiveServer

<PageTitle>Nakit Akış Dashboard</PageTitle>
<Container Fluid>
    <!-- Header Section -->
    <div class="dashboard-header text-center">
        <h1 class="mb-3">
            <i class="fas fa-chart-line me-3"></i>
            Nakit Akış Analizi Dashboard
        </h1>
        <p class="mb-0">PostgreSQL veritabanındaki nakit akış verilerinizi analiz edin, grafiklerle görselleştirin ve raporlarınızı dışa aktarın</p>
    </div>
    @if (!connectionOk)
    {
        <Alert Color="Color.Danger" Class="alert-modern">
            <AlertMessage>
                <i class="fas fa-exclamation-triangle me-2"></i>
                Veritabanı bağlantısı kurulamadı. Lütfen bağlantı ayarlarını kontrol edin.
            </AlertMessage>
        </Alert>
    }

    <!-- Form Section -->
    <Row>
        <Column ColumnSize="ColumnSize.Is12">
            <Card Class="card-modern">
                <CardBody>
                    <Tabs @bind-SelectedTab="selectedTab">
                        <Items>
                            <Tab Name="parametric">
                                <i class="fas fa-sliders-h me-2"></i>Parametreli Analiz
                            </Tab>
                            <Tab Name="default">
                                <i class="fas fa-eye me-2"></i>Varsayılan Görünüm
                            </Tab>
                        </Items>
                        <Content>
                            <TabPanel Name="parametric">
                                <EditForm Model="parametreler" OnValidSubmit="HandleValidSubmit">
                                    <DataAnnotationsValidator />

                                    <Row Class="g-4">


                                        <!-- Kaynak Kuruluş -->
                                        <Column ColumnSize="ColumnSize.Is3.OnDesktop.Is6.OnTablet.Is12.OnMobile">
                                            <Field>
                                                <FieldLabel>
                                                    <i class="fas fa-building me-2"></i>Kaynak Kuruluş
                                                </FieldLabel>
                                                <Select TValue="string"
                                                        SelectedValue="@parametreler.KaynakKurulus"
                                                        SelectedValueChanged="OnKaynakKurulusChanged"
                                                        Class="form-control-modern">
                                                    <SelectItem TValue="string" Value="@("")">Kaynak Kuruluşu Seçiniz</SelectItem>
                                                    @foreach (var kurum in kaynakKuruluslar)
                                                    {
                                                        <SelectItem TValue="string" Value="@(kurum.KaynakKurulus)">
                                                            @kurum.KaynakKurulus (@kurum.KayitSayisi kayıt)
                                                        </SelectItem>
                                                    }
                                                </Select>
                                            </Field>
                                        </Column>

                                        <!-- Fon Numarası -->
                                        <Column ColumnSize="ColumnSize.Is3.OnDesktop.Is6.OnTablet.Is12.OnMobile">
                                            <Field>
                                                <FieldLabel>
                                                    <i class="fas fa-folder me-2"></i>Fon Numarası
                                                </FieldLabel>
                                                <Select TValue="string"
                                                        @bind-SelectedValue="parametreler.SecilenFonNo"
                                                        Class="form-control-modern"
                                                        ValueChanged="OnFonNoChanged"
                                                        Disabled="@(!fonlar.Any())">
                                                    <SelectItem Value="@("")">Tüm Fonlar</SelectItem>
                                                    @foreach (var fon in fonlar)
                                                    {
                                                        <SelectItem Value="@(fon.FonNo)">
                                                            @fon.FonNo (@fon.KayitSayisi kayıt - ₺@fon.ToplamTutar.ToString("N0"))
                                                        </SelectItem>
                                                    }
                                                </Select>
                                                <FieldHelp>
                                                    <i class="fas fa-info-circle me-2"></i>
                                                    @if (!fonlar.Any())
                                                    {
                                                        <span class="text-muted">Önce kaynak kuruluş seçin</span>
                                                    }
                                                    else
                                                    {
                                                        <span>@fonlar.Count fon mevcut</span>
                                                    }
                                                </FieldHelp>
                                            </Field>
                                        </Column>

                                        <!-- İhraç Numarası -->
                                        <Column ColumnSize="ColumnSize.Is3.OnDesktop.Is6.OnTablet.Is12.OnMobile">
                                            <Field>
                                                <FieldLabel>
                                                    <i class="fas fa-file-contract me-2"></i>İhraç Numarası
                                                </FieldLabel>
                                                <Select TValue="string"
                                                        @bind-SelectedValue="parametreler.SecilenIhracNo"
                                                        Class="form-control-modern"
                                                        Disabled="@(!ihraclar.Any() || string.IsNullOrEmpty(parametreler.SecilenFonNo))">
                                                    <SelectItem Value="@("")">Tüm İhraçlar</SelectItem>
                                                    @foreach (var ihrac in ihraclar)
                                                    {
                                                        <SelectItem Value="@(ihrac.IhracNo)">
                                                            @ihrac.IhracNo (@ihrac.KayitSayisi kayıt - ₺@ihrac.ToplamTutar.ToString("N0"))
                                                        </SelectItem>
                                                    }
                                                </Select>
                                                <FieldHelp>
                                                    <i class="fas fa-info-circle me-2"></i>
                                                    @if (string.IsNullOrEmpty(parametreler.SecilenFonNo))
                                                    {
                                                        <span class="text-muted">Önce fon numarası seçin</span>
                                                    }
                                                    else if (!ihraclar.Any())
                                                    {
                                                        <span class="text-muted">Bu fon için ihraç bulunamadı</span>
                                                    }
                                                    else
                                                    {
                                                        <span>@ihraclar.Count ihraç mevcut</span>
                                                    }
                                                </FieldHelp>
                                            </Field>
                                        </Column>

                                        <!-- Model Faiz Oranı -->
                                        <Column ColumnSize="ColumnSize.Is3.OnDesktop.Is6.OnTablet.Is12.OnMobile">
                                            <Field>
                                                <FieldLabel>
                                                    <i class="fas fa-percentage me-2"></i>Model Faiz Oranı (%)
                                                </FieldLabel>
                                                <NumericPicker TValue="decimal"
                                                               @bind-Value="parametreler.ModelFaizOrani"
                                                               Step="0.01m"
                                                               Min="0.01m"
                                                               Max="1.0m"
                                                               Class="form-control-modern"
                                                               Placeholder="Örn: 0.45" />
                                                <FieldHelp>
                                                    <i class="fas fa-info-circle me-2"></i>
                                                    Model hesaplama için kullanılacak faiz oranı
                                                </FieldHelp>
                                                <ValidationMessage For="@(() => parametreler.ModelFaizOrani)" />
                                            </Field>
                                        </Column>

                                    </Row>

                                    <Row Class="g-4 mt-2">
                                        <!-- Hesaplama Yöntemi -->
                                        <Column ColumnSize="ColumnSize.Is6.OnDesktop.Is12.OnMobile">
                                            <Field>
                                                <FieldLabel>
                                                    <i class="fas fa-calculator me-2"></i>Hesaplama Yöntemi
                                                </FieldLabel>
                                                <Select TValue="string"
                                                        @bind-SelectedValue="parametreler.HesaplamaYontemi"
                                                        DefaultValue="database"
                                                        Class="form-control-modern">
                                                    <SelectItem Value="@("database")">Veritabanı Formülü (Orijinal)</SelectItem>
                                                    <SelectItem Value="@("simple")">Basit Faiz</SelectItem>
                                                    <SelectItem Value="@("compound")">Bileşik Faiz</SelectItem>
                                                </Select>
                                                <FieldHelp>
                                                    <i class="fas fa-info-circle me-2"></i>
                                                    Veritabanı formülü: ZBJ %45, diğerleri %48/mevcut oran
                                                </FieldHelp>
                                            </Field>
                                        </Column>
                                        <div class="mt-3">
                                            <Button Color="Color.Warning" Clicked="@TestFonlar">
                                                Test Fon Çekme
                                            </Button>
                                            <div class="mt-2">
                                                <strong>Test Sonucu:</strong> @testSonuc
                                            </div>
                                        </div>

                                        <div class="mt-3 p-3 border">
                                            <h5>Basit Test</h5>
                                            <Button Color="Color.Danger" Clicked="@(() => testSonuc = DateTime.Now.ToString())">
                                                Basit Test
                                            </Button>
                                            <p><strong>Sonuç:</strong> @testSonuc</p>
                                        </div>
                                        <!-- Aktif Filtreler -->
                                        <Column ColumnSize="ColumnSize.Is6.OnDesktop.Is12.OnMobile">
                                            @if (!string.IsNullOrEmpty(parametreler.SecilenFonNo) || !string.IsNullOrEmpty(parametreler.SecilenIhracNo))
                                            {
                                                <div class="selected-filters">
                                                    <FieldLabel>
                                                        <i class="fas fa-filter me-2"></i>Aktif Filtreler
                                                    </FieldLabel>
                                                    <div class="mt-2">
                                                        @if (!string.IsNullOrEmpty(parametreler.SecilenFonNo))
                                                        {
                                                            <Badge Color="Color.Primary" Class="me-2">Fon: @parametreler.SecilenFonNo</Badge>
                                                        }
                                                        @if (!string.IsNullOrEmpty(parametreler.SecilenIhracNo))
                                                        {
                                                            <Badge Color="Color.Success" Class="me-2">İhraç: @parametreler.SecilenIhracNo</Badge>
                                                        }
                                                    </div>
                                                </div>
                                            }
                                        </Column>
                                    </Row>
                                    <div class="text-center mt-4">
                                        <button type="submit"
                                                class="btn btn-primary me-3"
                                                @onclick="@HandleValidSubmit"
                                                disabled="@isLoading">
                                            @if (isLoading)
                                            {
                                                <span class="spinner-border spinner-border-sm me-2"></span>
                                            }
                                            else
                                            {
                                                <i class="fas fa-search me-2"></i>
                                            }
                                            Analizi Çalıştır
                                        </button>

                                        <button type="button"
                                                class="btn btn-outline-secondary"
                                                @onclick="@ResetParameters">
                                            <i class="fas fa-undo me-2"></i>
                                            Sıfırla
                                        </button>
                                    </div>

                                    <div class="text-center mt-4">
                                        <Buttons Class="gap-3">
                                            <Button Color="Color.Primary"
                                                    Type="ButtonType.Submit"
                                                    Loading="isLoading"
                                                    Class="btn-modern">
                                                @if (isLoading)
                                                {
                                                    <span class="loading-spinner me-2"></span>
                                                }
                                                else
                                                {
                                                    <i class="fas fa-search me-2"></i>
                                                }
                                                Analizi Çalıştır
                                            </Button>
                                            <Button Color="Color.Secondary"
                                                    Clicked="@ResetParameters"
                                                    Outline
                                                    Class="btn-modern">
                                                <i class="fas fa-undo me-2"></i>
                                                Sıfırla
                                            </Button>
                                        </Buttons>
                                    </div>
                                </EditForm>
                            </TabPanel>

                            <TabPanel Name="default">
                                <div class="text-center">
                                    <div class="mb-4">
                                        <i class="fas fa-bolt fa-3x text-primary mb-3"></i>
                                        <h4>Hızlı Analiz</h4>
                                        <p class="text-muted">
                                            Varsayılan parametrelerle hızlı görünüm:<br>
                                            <Badge Color="Color.Primary">Model Faiz: 45%</Badge>
                                            <Badge Color="Color.Info" Class="ms-2">Kaynak Kuruluş: FİBABANKA</Badge>
                                            <Badge Color="Color.Success" Class="ms-2">Veritabanı Formülü</Badge>
                                        </p>
                                    </div>
                                    <Button Color="Color.Info"
                                            Clicked="LoadDefaultView"
                                            Loading="isLoadingDefault"
                                            Class="btn-modern">
                                        @if (isLoadingDefault)
                                        {
                                            <span class="loading-spinner me-2"></span>
                                        }
                                        else
                                        {
                                            <i class="fas fa-eye me-2"></i>
                                        }
                                        Varsayılan Görünümü Yükle
                                    </Button>
                                </div>
                            </TabPanel>
                        </Content>
                    </Tabs>
                </CardBody>
            </Card>
        </Column>
    </Row>

    <!-- Results Section -->
    @if (sonuc != null)
    {
        <!-- Parameter Summary -->
        <Row Class="mt-4">
            <Column ColumnSize="ColumnSize.Is12">
                <div class="parameter-summary">
                    <h6><i class="fas fa-info-circle me-2"></i>Analiz Parametreleri</h6>
                    <div class="parameter-tags">
                        <span class="parameter-tag">
                            <strong>Model Faiz:</strong> %@((parametreler.ModelFaizOrani * 100).ToString("F2"))
                        </span>
                        <span class="parameter-tag">
                            <strong>Kuruluş:</strong> @parametreler.KaynakKurulus
                        </span>
                        @if (!string.IsNullOrEmpty(parametreler.SecilenFonNo))
                        {
                            <span class="parameter-tag">
                                <strong>Fon:</strong> @parametreler.SecilenFonNo
                            </span>
                        }
                        @if (!string.IsNullOrEmpty(parametreler.SecilenIhracNo))
                        {
                            <span class="parameter-tag">
                                <strong>İhraç:</strong> @parametreler.SecilenIhracNo
                            </span>
                        }
                        <span class="parameter-tag">
                            <strong>Yöntem:</strong> @GetHesaplamaYontemiText()
                        </span>
                    </div>
                </div>
            </Column>
        </Row>

        <!-- Metrics Cards -->
        <Row Class="g-4 mt-4">
            <Column ColumnSize="ColumnSize.Is3.OnDesktop.Is6.OnTablet.Is12.OnMobile">
                <div class="metric-card" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
                    <div class="metric-value">₺@sonuc.ToplamFaizTutari.ToString("N2")</div>
                    <div class="metric-label">Toplam Faiz Tutarı</div>
                </div>
            </Column>
            <Column ColumnSize="ColumnSize.Is3.OnDesktop.Is6.OnTablet.Is12.OnMobile">
                <div class="metric-card" style="background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);">
                    <div class="metric-value">₺@sonuc.ToplamModelFaizTutari.ToString("N2")</div>
                    <div class="metric-label">Model Faiz Tutarı</div>
                </div>
            </Column>
            <Column ColumnSize="ColumnSize.Is3.OnDesktop.Is6.OnTablet.Is12.OnMobile">
                <div class="metric-card" style="background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);">
                    <div class="metric-value">₺@sonuc.FarkTutari.ToString("N2")</div>
                    <div class="metric-label">Fark Tutarı</div>
                </div>
            </Column>
            <Column ColumnSize="ColumnSize.Is3.OnDesktop.Is6.OnTablet.Is12.OnMobile">
                <div class="metric-card" style="background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);">
                    <div class="metric-value">%@sonuc.FarkYuzdesi.ToString("N2")</div>
                    <div class="metric-label">Fark Yüzdesi</div>
                </div>
            </Column>
        </Row>

        <!-- Charts Section -->
        <div class="chart-container">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h5 class="mb-0">
                    <i class="fas fa-chart-line me-2"></i>Grafik Görünümleri
                </h5>
                <div class="chart-tabs">
                    <button class="chart-tab @(activeChartTab == "bar" ? "active" : "")"
                            @onclick='() => SetActiveChartTab("bar")'>
                        <i class="fas fa-chart-bar me-2"></i>Bar Chart
                    </button>
                    <button class="chart-tab @(activeChartTab == "pie" ? "active" : "")"
                            @onclick='() => SetActiveChartTab("pie")'>
                        <i class="fas fa-chart-pie me-2"></i>Pie Chart
                    </button>
                    <button class="chart-tab @(activeChartTab == "doughnut" ? "active" : "")"
                            @onclick='() => SetActiveChartTab("doughnut")'>
                        <i class="fas fa-circle-notch me-2"></i>Doughnut
                    </button>
                </div>
            </div>

            <Row>
                <Column ColumnSize="ColumnSize.Is12">
                    @if (activeChartTab == "bar")
                    {
                        <canvas id="barChart" width="400" height="200"></canvas>
                    }
                    else if (activeChartTab == "pie")
                    {
                        <canvas id="pieChart" width="400" height="200"></canvas>
                    }
                    else if (activeChartTab == "doughnut")
                    {
                        <canvas id="doughnutChart" width="400" height="200"></canvas>
                    }
                </Column>
            </Row>
        </div>

        <!-- Export Section -->
        <div class="export-section">
            <div class="text-center">
                <h4>
                    <i class="fas fa-download me-2"></i>
                    Rapor Dışa Aktarma
                </h4>
                <p class="mb-0">Analiz sonuçlarınızı farklı formatlarda indirebilirsiniz</p>

                <div class="export-buttons">
                    <button class="btn btn-export"
                            @onclick='() => ExportData("excel")'
                            disabled="@isExporting">
                        @if (isExporting && exportType == "excel")
                        {
                            <span class="loading-spinner me-2"></span>
                        }
                        else
                        {
                            <i class="fas fa-file-excel me-2"></i>
                        }
                        Excel İndir
                    </button>

                    <button class="btn btn-export"
                            @onclick='() => ExportData("csv")'
                            disabled="@isExporting">
                        @if (isExporting && exportType == "csv")
                        {
                            <span class="loading-spinner me-2"></span>
                        }
                        else
                        {
                            <i class="fas fa-file-csv me-2"></i>
                        }
                        CSV İndir
                    </button>

                    <button class="btn btn-export"
                            @onclick='() => ExportData("html")'
                            disabled="@isExporting">
                        @if (isExporting && exportType == "html")
                        {
                            <span class="loading-spinner me-2"></span>
                        }
                        else
                        {
                            <i class="fas fa-code me-2"></i>
                        }
                        HTML Görüntüle
                    </button>
                </div>
            </div>
        </div>
    }
</Container>

<style>
    .parameter-summary {
        background: #f8f9fa;
        border-radius: 10px;
        padding: 1rem;
        border-left: 4px solid #007bff;
    }

    .parameter-tags {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin-top: 0.5rem;
    }

    .parameter-tag {
        background: #e9ecef;
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.85rem;
        color: #495057;
    }

    .selected-filters {
        padding: 1rem;
        background: #f8f9fa;
        border-radius: 8px;
        border-left: 4px solid #28a745;
    }
</style>

@code {
    private NakitAkisParametre parametreler = new();
    private NakitAkisSonuc? sonuc;
    // private List<BankaBilgi> bankalar = new();
    private List<KaynakKurulusBilgi> kaynakKuruluslar = new();
    // private IReadOnlyList<string> selectedBankalar = new List<string>();

    // Yeni cascading dropdown değişkenleri
    private List<FonBilgi> fonlar = new();
    private List<IhracBilgi> ihraclar = new();

    private bool isLoading = false;
    private bool isLoadingDefault = false;
    private bool isExporting = false;
    private bool connectionOk = true;
    private string selectedTab = "parametric";
    private string activeChartTab = "bar";
    private string exportType = "";

    protected override async Task OnInitializedAsync()
    {
        connectionOk = await NakitAkisService.TestConnectionAsync();

        if (connectionOk)
        {
            // bankalar = await NakitAkisService.GetBankalarAsync();
            kaynakKuruluslar = await NakitAkisService.GetKaynakKuruluslarAsync();
            Console.WriteLine($"Kuruluş sayısı: {kaynakKuruluslar.Count}");

            // İlk kaynak kuruluş için fonları yükle
            // if (kaynakKuruluslar.Any() && !string.IsNullOrEmpty(parametreler.KaynakKurulus))
            // {
            //     fonlar = await NakitAkisService.GetFonlarAsync(parametreler.KaynakKurulus);
            // }

            fonlar.Clear();
            ihraclar.Clear();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (sonuc != null)
        {
            await UpdateCharts();
        }
    }

    // Cascading dropdown event handlers
    private async Task OnKaynakKurulusChanged(string kaynakKurulus)
    {
        Console.WriteLine($"Kaynak kuruluş değişti: {kaynakKurulus}");

        parametreler.KaynakKurulus = kaynakKurulus;
        parametreler.SecilenFonNo = null;
        parametreler.SecilenIhracNo = null;

        ihraclar.Clear();
        fonlar.Clear();

        if (!string.IsNullOrEmpty(kaynakKurulus))
        {
            try
            {
                fonlar = await NakitAkisService.GetFonlarAsync(kaynakKurulus);
                Console.WriteLine($"Fon sayısı: {fonlar.Count}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Fon yükleme hatası: {ex.Message}");
            }
        }

        StateHasChanged();
    }

    private async Task OnFonNoChanged(string fonNo)
    {
        Console.WriteLine($"Fon numarası değişti: {fonNo}");

        parametreler.SecilenFonNo = fonNo;
        parametreler.SecilenIhracNo = null;

        ihraclar.Clear();

        if (!string.IsNullOrEmpty(fonNo) && !string.IsNullOrEmpty(parametreler.KaynakKurulus))
        {
            try
            {
                ihraclar = await NakitAkisService.GetIhraclarAsync(parametreler.KaynakKurulus, fonNo);
                Console.WriteLine($"İhraç sayısı: {ihraclar.Count}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"İhraç yükleme hatası: {ex.Message}");
            }
        }

        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        isLoading = true;
        try
        {
            // parametreler.SecilenBankalar = selectedBankalar.ToList();
            sonuc = await NakitAkisService.GetNakitAkisAnaliziAsync(parametreler);
            await UpdateCharts();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
    private async Task OnIhracNoChanged(string ihracNo)
    {
        Console.WriteLine($"İhraç numarası değişti: {ihracNo}");
        parametreler.SecilenIhracNo = ihracNo;
        StateHasChanged();
    }
    private async Task LoadDefaultView()
    {
        isLoadingDefault = true;
        try
        {
            var defaultParams = new NakitAkisParametre
            {
                ModelFaizOrani = 0.45m,
                KaynakKurulus = "FİBABANKA",
                HesaplamaYontemi = "database"
            };

            sonuc = await NakitAkisService.GetNakitAkisAnaliziAsync(defaultParams);
            await UpdateCharts();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            isLoadingDefault = false;
        }
    }

    private void ResetParameters()
    {
        parametreler = new NakitAkisParametre();
        // selectedBankalar = new List<string>();
        fonlar.Clear();
        ihraclar.Clear();
        sonuc = null;
        Console.WriteLine("Reset completed!");
        StateHasChanged();
    }

    private async Task SetActiveChartTab(string tabName)
    {
        activeChartTab = tabName;
        await UpdateCharts();
    }

    private async Task UpdateCharts()
    {
        if (sonuc == null) return;

        var chartData = new
        {
            labels = new[] { "Toplam Faiz", "Model Faiz", "Fark" },
            datasets = new[]
            {
                new
                {
                    label = "Tutarlar (₺)",
                    data = new[] { sonuc.ToplamFaizTutari, sonuc.ToplamModelFaizTutari, Math.Abs(sonuc.FarkTutari) },
                    backgroundColor = new[]
                    {
                        "rgba(102, 126, 234, 0.8)",
                        "rgba(56, 239, 125, 0.8)",
                        "rgba(245, 87, 108, 0.8)"
                    },
                    borderColor = new[]
                    {
                        "rgba(102, 126, 234, 1)",
                        "rgba(56, 239, 125, 1)",
                        "rgba(245, 87, 108, 1)"
                    },
                    borderWidth = 2
                }
            }
        };

        if (activeChartTab == "bar")
        {
            await JSRuntime.InvokeVoidAsync("createBarChart", "barChart", chartData);
        }
        else if (activeChartTab == "pie")
        {
            await JSRuntime.InvokeVoidAsync("createPieChart", "pieChart", chartData);
        }
        else if (activeChartTab == "doughnut")
        {
            await JSRuntime.InvokeVoidAsync("createDoughnutChart", "doughnutChart", chartData);
        }
    }

    private async Task ExportData(string format)
    {
        if (sonuc == null || parametreler == null) return;

        isExporting = true;
        exportType = format;

        try
        {
            var exportRequest = new
            {
                Parametreler = new
                {
                    parametreler.ModelFaizOrani,
                    parametreler.KaynakKurulus,
                    parametreler.SecilenFonNo,
                    parametreler.SecilenIhracNo,
                    // parametreler.SecilenBankalar,
                    parametreler.HesaplamaYontemi
                }
            };

            var json = JsonSerializer.Serialize(exportRequest);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            if (format == "html")
            {
                var response = await HttpClient.PostAsync($"/api/export/{format}", content);
                if (response.IsSuccessStatusCode)
                {
                    var htmlContent = await response.Content.ReadAsStringAsync();
                    await JSRuntime.InvokeVoidAsync("openHtmlInNewTab", htmlContent);
                }
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("downloadFile", $"/api/export/{format}", json);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Export error: {ex.Message}");
        }
        finally
        {
            isExporting = false;
            exportType = "";
        }
    }
    private string testSonuc = "";

    private async Task TestFonlar()
    {
        testSonuc = "Butona basıldı!";
        StateHasChanged();

        await Task.Delay(1000);

        testSonuc = "1 saniye geçti!";
        StateHasChanged();
    }
    private string GetHesaplamaYontemiText()
    {
        return (parametreler.HesaplamaYontemi ?? "database") switch
        {
            "database" => "Veritabanı Formülü",
            "simple" => "Basit Faiz",
            "compound" => "Bileşik Faiz",
            _ => "Bilinmiyor"
        };
    }
}